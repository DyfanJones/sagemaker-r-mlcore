% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimator.R
\name{EstimatorBase}
\alias{EstimatorBase}
\title{Handle end-to-end Amazon SageMaker training and deployment tasks.}
\description{
For introduction to model training and deployment, see
             http://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works-training.html
             Subclasses must define a way to determine what image to use for training,
             what hyperparameters to use, and how to create an appropriate predictor
             instance.
}
\note{
Updating the profiling configuration for TensorFlow dataloader profiling
             is currently not available. If you started a TensorFlow training job only with
             monitoring and want to enable profiling while the training job is running,
             the dataloader profiling cannot be updated.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{model_data}}{The model location in S3. Only set if Estimator has been ``fit()``.}

\item{\code{training_job_analytics}}{Return a ``TrainingJobAnalytics`` object for the current training job.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{EstimatorBase$new()}}
\item \href{#method-help}{\code{EstimatorBase$help()}}
\item \href{#method-training_image_uri}{\code{EstimatorBase$training_image_uri()}}
\item \href{#method-hyperparameters}{\code{EstimatorBase$hyperparameters()}}
\item \href{#method-enable_network_isolation}{\code{EstimatorBase$enable_network_isolation()}}
\item \href{#method-prepare_workflow_for_training}{\code{EstimatorBase$prepare_workflow_for_training()}}
\item \href{#method-latest_job_debugger_artifacts_path}{\code{EstimatorBase$latest_job_debugger_artifacts_path()}}
\item \href{#method-latest_job_tensorboard_artifacts_path}{\code{EstimatorBase$latest_job_tensorboard_artifacts_path()}}
\item \href{#method-latest_job_profiler_artifacts_path}{\code{EstimatorBase$latest_job_profiler_artifacts_path()}}
\item \href{#method-fit}{\code{EstimatorBase$fit()}}
\item \href{#method-wait}{\code{EstimatorBase$wait()}}
\item \href{#method-describe}{\code{EstimatorBase$describe()}}
\item \href{#method-rule_job_summary}{\code{EstimatorBase$rule_job_summary()}}
\item \href{#method-compile_model}{\code{EstimatorBase$compile_model()}}
\item \href{#method-attach}{\code{EstimatorBase$attach()}}
\item \href{#method-logs}{\code{EstimatorBase$logs()}}
\item \href{#method-deploy}{\code{EstimatorBase$deploy()}}
\item \href{#method-register}{\code{EstimatorBase$register()}}
\item \href{#method-create_model}{\code{EstimatorBase$create_model()}}
\item \href{#method-delete_endpoint}{\code{EstimatorBase$delete_endpoint()}}
\item \href{#method-transformer}{\code{EstimatorBase$transformer()}}
\item \href{#method-get_vpc_config}{\code{EstimatorBase$get_vpc_config()}}
\item \href{#method-.prepare_for_training}{\code{EstimatorBase$.prepare_for_training()}}
\item \href{#method-enable_default_profiling}{\code{EstimatorBase$enable_default_profiling()}}
\item \href{#method-disable_profiling}{\code{EstimatorBase$disable_profiling()}}
\item \href{#method-update_profiler}{\code{EstimatorBase$update_profiler()}}
\item \href{#method-format}{\code{EstimatorBase$format()}}
\item \href{#method-clone}{\code{EstimatorBase$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize an ``EstimatorBase`` instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$new(
  role,
  instance_count = NULL,
  instance_type = NULL,
  volume_size = 30,
  volume_kms_key = NULL,
  max_run = 24 * 60 * 60,
  input_mode = "File",
  output_path = NULL,
  output_kms_key = NULL,
  base_job_name = NULL,
  sagemaker_session = NULL,
  tags = NULL,
  subnets = NULL,
  security_group_ids = NULL,
  model_uri = NULL,
  model_channel_name = "model",
  metric_definitions = NULL,
  encrypt_inter_container_traffic = FALSE,
  use_spot_instances = FALSE,
  max_wait = NULL,
  checkpoint_s3_uri = NULL,
  checkpoint_local_path = NULL,
  rules = NULL,
  debugger_hook_config = NULL,
  tensorboard_output_config = NULL,
  enable_sagemaker_metrics = NULL,
  enable_network_isolation = FALSE,
  profiler_config = NULL,
  disable_profiler = FALSE,
  environment = NULL,
  max_retry_attempts = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): An AWS IAM role (either name or full ARN). The Amazon
SageMaker training jobs and APIs that create Amazon SageMaker
endpoints use this role to access training data and model
artifacts. After the endpoint is created, the inference code
might use the IAM role, if it needs to access an AWS resource.}

\item{\code{instance_count}}{(int): Number of Amazon EC2 instances to use
for training.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use for training,
for example, 'ml.c4.xlarge'.}

\item{\code{volume_size}}{(int): Size in GB of the EBS volume to use for
storing input data during training (default: 30). Must be large
enough to store training data if File Mode is used (which is the
default).}

\item{\code{volume_kms_key}}{(str): Optional. KMS key ID for encrypting EBS
volume attached to the training instance (default: NULL).}

\item{\code{max_run}}{(int): Timeout in seconds for training (default: 24 *
60 * 60). After this amount of time Amazon SageMaker terminates
the job regardless of its current status.}

\item{\code{input_mode}}{(str): The input mode that the algorithm supports
(default: 'File'). Valid modes: 'File' - Amazon SageMaker copies
the training dataset from the S3 location to a local directory.
'Pipe' - Amazon SageMaker streams data directly from S3 to the
container via a Unix-named pipe. This argument can be overriden
on a per-channel basis using
``TrainingInput.input_mode``.}

\item{\code{output_path}}{(str): S3 location for saving the training result (model
artifacts and output files). If not specified, results are
stored to a default bucket. If the bucket with the specific name
does not exist, the estimator creates the bucket during the
:meth:`~sagemaker.estimator.EstimatorBase.fit` method execution.
file:// urls are used for local mode. For example: 'file://model/'
will save to the model folder in the current directory.}

\item{\code{output_kms_key}}{(str): Optional. KMS key ID for encrypting the
training output (default: NULL).}

\item{\code{base_job_name}}{(str): Prefix for training job name when the
:meth:`~sagemaker.estimator.EstimatorBase.fit` method launches.
If not specified, the estimator generates a default job name,
based on the training image name and current timestamp.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): Session object which
manages interactions with Amazon SageMaker APIs and any other
AWS services needed. If not specified, the estimator creates one
using the default AWS configuration chain.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a training job. For
more, see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.}

\item{\code{subnets}}{(list[str]): List of subnet ids. If not specified training
job will be created without VPC config.}

\item{\code{security_group_ids}}{(list[str]): List of security group ids. If not
specified training job will be created without VPC config.}

\item{\code{model_uri}}{(str): URI where a pre-trained model is stored, either
locally or in S3 (default: NULL). If specified, the estimator
will create a channel pointing to the model so the training job
can download it. This model can be a 'model.tar.gz' from a
previous training job, or other artifacts coming from a
different source.
In local mode, this should point to the path in which the model
is located and not the file itself, as local Docker containers
will try to mount the URI as a volume.
More information:
https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-training.html#td-deserialization}

\item{\code{model_channel_name}}{(str): Name of the channel where 'model_uri' will
be downloaded (default: 'model').}

\item{\code{metric_definitions}}{(list[dict]): A list of dictionaries that defines
the metric(s) used to evaluate the training jobs. Each
dictionary contains two keys: 'Name' for the name of the metric,
and 'Regex' for the regular expression used to extract the
metric from the logs. This should be defined only for jobs that
don't use an Amazon algorithm.}

\item{\code{encrypt_inter_container_traffic}}{(bool): Specifies whether traffic
between training containers is encrypted for the training job
(default: ``False``).}

\item{\code{use_spot_instances}}{(bool): Specifies whether to use SageMaker
Managed Spot instances for training. If enabled then the
`max_wait` arg should also be set.
More information:
https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html
(default: ``False``).}

\item{\code{max_wait}}{(int): Timeout in seconds waiting for spot training
instances (default: NULL). After this amount of time Amazon
SageMaker will stop waiting for Spot instances to become
available (default: ``NULL``).}

\item{\code{checkpoint_s3_uri}}{(str): The S3 URI in which to persist checkpoints
that the algorithm persists (if any) during training. (default:
``NULL``).}

\item{\code{checkpoint_local_path}}{(str): The local path that the algorithm
writes its checkpoints to. SageMaker will persist all files
under this path to `checkpoint_s3_uri` continually during
training. On job startup the reverse happens - data from the
s3 location is downloaded to this path before the algorithm is
started. If the path is unset then SageMaker assumes the
checkpoints will be provided under `/opt/ml/checkpoints/`.
(default: ``NULL``).}

\item{\code{rules}}{(list[:class:`~sagemaker.debugger.Rule`]): A list of
:class:`~sagemaker.debugger.Rule` objects used to define
rules for continuous analysis with SageMaker Debugger
(default: ``NULL``). For more, see
https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_debugger.html#continuous-analyses-through-rules}

\item{\code{debugger_hook_config}}{(:class:`~sagemaker.debugger.DebuggerHookConfig` or bool):
Configuration for how debugging information is emitted with
SageMaker Debugger. If not specified, a default one is created using
the estimator's ``output_path``, unless the region does not
support SageMaker Debugger. To disable SageMaker Debugger,
set this parameter to ``False``. For more, see
https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_debugger.html}

\item{\code{tensorboard_output_config}}{(:class:`~sagemaker.debugger.TensorBoardOutputConfig`):
Configuration for customizing debugging visualization using TensorBoard
(default: ``NULL``). For more, see
https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_debugger.html#capture-real-time-tensorboard-data-from-the-debugging-hook}

\item{\code{enable_sagemaker_metrics}}{(bool): Enables SageMaker Metrics Time
Series. For more information see:
https://docs.aws.amazon.com/sagemaker/latest/dg/API_AlgorithmSpecification.html#SageMaker-Type-AlgorithmSpecification-EnableSageMakerMetricsTimeSeries
(default: ``NULL``).}

\item{\code{enable_network_isolation}}{(bool): Specifies whether container will
run in network isolation mode (default: ``False``). Network
isolation mode restricts the container access to outside networks
(such as the Internet). The container does not make any inbound or
outbound network calls. Also known as Internet-free mode.}

\item{\code{profiler_config}}{(:class:`~sagemaker.debugger.ProfilerConfig`):
Configuration for how SageMaker Debugger collects
monitoring and profiling information from your training job.
If not specified, a default configuration is created using
the estimator's ``output_path``, unless the region does not
support SageMaker Debugger. To disable SageMaker Debugger
monitoring and profiling, set the
``disable_profiler`` parameter to ``True``.}

\item{\code{disable_profiler}}{(bool): Specifies whether Debugger monitoring and profiling
will be disabled (default: ``False``).}

\item{\code{environment}}{(dict[str, str]) : Environment variables to be set for
use during training job (default: ``None``)}

\item{\code{max_retry_attempts}}{(int): The number of times to move a job to the STARTING status.
You can specify between 1 and 30 attempts.
If the value of attempts is greater than zero,
the job is retried on InternalServerFailure
the same number of attempts as the value.
You can cap the total duration for your job by setting ``max_wait`` and ``max_run``
(default: ``None``)}

\item{\code{...}}{: update any deprecated parameters passed into class.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-help"></a>}}
\if{latex}{\out{\hypertarget{method-help}{}}}
\subsection{Method \code{help()}}{
Return class documentation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$help()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-training_image_uri"></a>}}
\if{latex}{\out{\hypertarget{method-training_image_uri}{}}}
\subsection{Method \code{training_image_uri()}}{
Return the Docker image to use for training.
             The :meth:`~sagemaker.estimator.EstimatorBase.fit` method, which does
             the model training, calls this method to find the image to use for model
             training.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$training_image_uri()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
str: The URI of the Docker image.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-hyperparameters"></a>}}
\if{latex}{\out{\hypertarget{method-hyperparameters}{}}}
\subsection{Method \code{hyperparameters()}}{
Return the hyperparameters as a dictionary to use for training.
             The :meth:`~sagemaker.estimator.EstimatorBase.fit` method, which
             trains the model, calls this method to find the hyperparameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$hyperparameters()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
dict[str, str]: The hyperparameters.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-enable_network_isolation"></a>}}
\if{latex}{\out{\hypertarget{method-enable_network_isolation}{}}}
\subsection{Method \code{enable_network_isolation()}}{
Return True if this Estimator will need network isolation to run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$enable_network_isolation()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
bool: Whether this Estimator needs network isolation or not.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_workflow_for_training"></a>}}
\if{latex}{\out{\hypertarget{method-prepare_workflow_for_training}{}}}
\subsection{Method \code{prepare_workflow_for_training()}}{
Calls _prepare_for_training. Used when setting up a workflow.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$prepare_workflow_for_training(job_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{job_name}}{(str): Name of the training job to be created. If not
specified, one is generated, using the base name given to the
constructor if applicable.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-latest_job_debugger_artifacts_path"></a>}}
\if{latex}{\out{\hypertarget{method-latest_job_debugger_artifacts_path}{}}}
\subsection{Method \code{latest_job_debugger_artifacts_path()}}{
Gets the path to the DebuggerHookConfig output artifacts.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$latest_job_debugger_artifacts_path()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
str: An S3 path to the output artifacts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-latest_job_tensorboard_artifacts_path"></a>}}
\if{latex}{\out{\hypertarget{method-latest_job_tensorboard_artifacts_path}{}}}
\subsection{Method \code{latest_job_tensorboard_artifacts_path()}}{
Gets the path to the TensorBoardOutputConfig output artifacts.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$latest_job_tensorboard_artifacts_path()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
str: An S3 path to the output artifacts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-latest_job_profiler_artifacts_path"></a>}}
\if{latex}{\out{\hypertarget{method-latest_job_profiler_artifacts_path}{}}}
\subsection{Method \code{latest_job_profiler_artifacts_path()}}{
Gets the path to the profiling output artifacts.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$latest_job_profiler_artifacts_path()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
str: An S3 path to the output artifacts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fit"></a>}}
\if{latex}{\out{\hypertarget{method-fit}{}}}
\subsection{Method \code{fit()}}{
Train a model using the input training dataset.
             The API calls the Amazon SageMaker CreateTrainingJob API to start
             model training. The API uses configuration you provided to create the
             estimator and the specified input training data to send the
             CreatingTrainingJob request to Amazon SageMaker.
             This is a synchronous operation. After the model training
             successfully completes, you can call the ``deploy()`` method to host the
             model using the Amazon SageMaker hosting services.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$fit(
  inputs = NULL,
  wait = TRUE,
  logs = "All",
  job_name = NULL,
  experiment_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{(str or dict or TrainingInput): Information
about the training data. This can be one of three types:
\itemize{
  \item{\strong{(str)} the S3 location where training data is saved, or a file:// path in
local mode.}
  \item{\strong{(dict[str, str]} or dict[str, TrainingInput]) If using multiple
channels for training data, you can specify a dict mapping channel names to
strings or :func:`~TrainingInput` objects.}
  \item{\strong{(TrainingInput)} - channel configuration for S3 data sources that can
provide additional information as well as the path to the training dataset.
See :func:`TrainingInput` for full details.}
  \item{\strong{(sagemaker.session.FileSystemInput)} - channel configuration for
a file system data source that can provide additional information as well as
the path to the training dataset.}}}

\item{\code{wait}}{(bool): Whether the call should wait until the job completes (default: True).}

\item{\code{logs}}{([str]): A list of strings specifying which logs to print. Acceptable
strings are "All", "NULL", "Training", or "Rules". To maintain backwards
compatibility, boolean values are also accepted and converted to strings.
Only meaningful when wait is True.}

\item{\code{job_name}}{(str): Training job name. If not specified, the estimator generates
a default job name, based on the training image name and current timestamp.}

\item{\code{experiment_config}}{(dict[str, str]): Experiment management configuration.
Dictionary contains three optional keys,
'ExperimentName', 'TrialName', and 'TrialComponentDisplayName'.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-wait"></a>}}
\if{latex}{\out{\hypertarget{method-wait}{}}}
\subsection{Method \code{wait()}}{
Wait for an Amazon SageMaker job to complete.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$wait(logs = "All")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{logs}}{([str]): A list of strings specifying which logs to print. Acceptable
strings are "All", "NULL", "Training", or "Rules". To maintain backwards
compatibility, boolean values are also accepted and converted to strings.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-describe"></a>}}
\if{latex}{\out{\hypertarget{method-describe}{}}}
\subsection{Method \code{describe()}}{
Returns a response from the DescribeTrainingJob API call.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$describe()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rule_job_summary"></a>}}
\if{latex}{\out{\hypertarget{method-rule_job_summary}{}}}
\subsection{Method \code{rule_job_summary()}}{
Calls describe_training_job and returns two dictionaries.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$rule_job_summary()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list[dict]: A list of DebugRuleEvaluationStatuses and ProfilerRuleEvaluationStatuses
             dictionary.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compile_model"></a>}}
\if{latex}{\out{\hypertarget{method-compile_model}{}}}
\subsection{Method \code{compile_model()}}{
Compile a Neo model using the input model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$compile_model(
  target_instance_family,
  input_shape,
  output_path,
  framework = NULL,
  framework_version = NULL,
  compile_max_run = 15 * 60,
  tags = NULL,
  target_platform_os = NULL,
  target_platform_arch = NULL,
  target_platform_accelerator = NULL,
  compiler_options = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_instance_family}}{(str): Identifies the device that you want to
run your model after compilation, for example: ml_c5. For allowed
strings see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html.}

\item{\code{input_shape}}{(dict): Specifies the name and shape of the expected
inputs for your trained model in json dictionary form, for
example: {'data':[1,3,1024,1024]}, or {'var1': [1,1,28,28],
'var2':[1,1,28,28]}}

\item{\code{output_path}}{(str): Specifies where to store the compiled model}

\item{\code{framework}}{(str): The framework that is used to train the original
model. Allowed values: 'mxnet', 'tensorflow', 'keras', 'pytorch',
'onnx', 'xgboost'}

\item{\code{framework_version}}{(str): The version of the framework}

\item{\code{compile_max_run}}{(int): Timeout in seconds for compilation (default:
3 * 60). After this amount of time Amazon SageMaker Neo
terminates the compilation job regardless of its current status.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a compilation job. For
more, see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.}

\item{\code{target_platform_os}}{(str): Target Platform OS, for example: 'LINUX'.
For allowed strings see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html.
It can be used instead of target_instance_family.}

\item{\code{target_platform_arch}}{(str): Target Platform Architecture, for example: 'X86_64'.
For allowed strings see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html.
It can be used instead of target_instance_family.}

\item{\code{target_platform_accelerator}}{(str, optional): Target Platform Accelerator,
for example: 'NVIDIA'. For allowed strings see
https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html.
It can be used instead of target_instance_family.}

\item{\code{compiler_options}}{(dict, optional): Additional parameters for compiler.
Compiler Options are TargetPlatform / target_instance_family specific. See
https://docs.aws.amazon.com/sagemaker/latest/dg/API_OutputConfig.html for details.}

\item{\code{...}}{: Passed to invocation of ``create_model()``.
Implementations may customize ``create_model()`` to accept
``**kwargs`` to customize model creation during deploy. For
more, see the implementation docs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sagemaker.model.Model: A SageMaker ``Model`` object. See
             :func:`~sagemaker.model.Model` for full details.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-attach"></a>}}
\if{latex}{\out{\hypertarget{method-attach}{}}}
\subsection{Method \code{attach()}}{
Attach to an existing training job.
             Create an Estimator bound to an existing training job, each subclass
             is responsible to implement
             ``_prepare_init_params_from_job_description()`` as this method delegates
             the actual conversion of a training job description to the arguments
             that the class constructor expects. After attaching, if the training job
             has a Complete status, it can be ``deploy()`` ed to create a SageMaker
             Endpoint and return a ``Predictor``.
             If the training job is in progress, attach will block and display log
             messages from the training job, until the training job completes.
             Examples:
             >>> my_estimator.fit(wait=False)
             >>> training_job_name = my_estimator.latest_training_job.name
             Later on:
             >>> attached_estimator = Estimator.attach(training_job_name)
             >>> attached_estimator.deploy()
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$attach(
  training_job_name,
  sagemaker_session = NULL,
  model_channel_name = "model"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{training_job_name}}{(str): The name of the training job to attach to.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): Session object which
manages interactions with Amazon SageMaker APIs and any other
AWS services needed. If not specified, the estimator creates one
using the default AWS configuration chain.}

\item{\code{model_channel_name}}{(str): Name of the channel where pre-trained
model data will be downloaded (default: 'model'). If no channel
with the same name exists in the training job, this option will
be ignored.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Instance of the calling ``Estimator`` Class with the attached
             training job.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-logs"></a>}}
\if{latex}{\out{\hypertarget{method-logs}{}}}
\subsection{Method \code{logs()}}{
Display the logs for Estimator's training job.
             If the output is a tty or a Jupyter cell, it will be color-coded based
             on which instance the log entry is from.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$logs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deploy"></a>}}
\if{latex}{\out{\hypertarget{method-deploy}{}}}
\subsection{Method \code{deploy()}}{
Deploy the trained model to an Amazon SageMaker endpoint and return a
             ``sagemaker.Predictor`` object.
             More information:
             http://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works-training.html
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$deploy(
  initial_instance_count,
  instance_type,
  serializer = NULL,
  deserializer = NULL,
  accelerator_type = NULL,
  endpoint_name = NULL,
  use_compiled_model = FALSE,
  wait = TRUE,
  model_name = NULL,
  kms_key = NULL,
  data_capture_config = NULL,
  tags = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial_instance_count}}{(int): Minimum number of EC2 instances to
deploy to an endpoint for prediction.}

\item{\code{instance_type}}{(str): Type of EC2 instance to deploy to an endpoint
for prediction, for example, 'ml.c4.xlarge'.}

\item{\code{serializer}}{(:class:`~sagemaker.serializers.BaseSerializer`): A
serializer object, used to encode data for an inference endpoint
(default: None). If ``serializer`` is not None, then
``serializer`` will override the default serializer. The
default serializer is set by the ``predictor_cls``.}

\item{\code{deserializer}}{(:class:`~sagemaker.deserializers.BaseDeserializer`): A
deserializer object, used to decode data from an inference
endpoint (default: None). If ``deserializer`` is not None, then
``deserializer`` will override the default deserializer. The
default deserializer is set by the ``predictor_cls``.}

\item{\code{accelerator_type}}{(str): Type of Elastic Inference accelerator to
attach to an endpoint for model loading and inference, for
example, 'ml.eia1.medium'. If not specified, no Elastic
Inference accelerator will be attached to the endpoint. For more
information:
https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html}

\item{\code{endpoint_name}}{(str): Name to use for creating an Amazon SageMaker
endpoint. If not specified, the name of the training job is
used.}

\item{\code{use_compiled_model}}{(bool): Flag to select whether to use compiled
(optimized) model. Default: False.}

\item{\code{wait}}{(bool): Whether the call should wait until the deployment of
model completes (default: True).}

\item{\code{model_name}}{(str): Name to use for creating an Amazon SageMaker
model. If not specified, the estimator generates a default job name
based on the training image name and current timestamp.}

\item{\code{kms_key}}{(str): The ARN of the KMS key that is used to encrypt the
data on the storage volume attached to the instance hosting the
endpoint.}

\item{\code{data_capture_config}}{(sagemaker.model_monitor.DataCaptureConfig): Specifies
configuration related to Endpoint data capture for use with
Amazon SageMaker Model Monitoring. Default: None.}

\item{\code{tags}}{(List[dict[str, str]]): Optional. The list of tags to attach to this specific
endpoint. Example:
>>> tags = [{'Key': 'tagname', 'Value': 'tagvalue'}]
For more information about tags, see
https://boto3.amazonaws.com/v1/documentation\
/api/latest/reference/services/sagemaker.html#SageMaker.Client.add_tags}

\item{\code{...}}{: Passed to invocation of ``create_model()``.
Implementations may customize ``create_model()`` to accept
``**kwargs`` to customize model creation during deploy.
For more, see the implementation docs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sagemaker.predictor.Predictor: A predictor that provides a ``predict()`` method,
             which can be used to send requests to the Amazon SageMaker
             endpoint and obtain inferences.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-register"></a>}}
\if{latex}{\out{\hypertarget{method-register}{}}}
\subsection{Method \code{register()}}{
Creates a model package for creating SageMaker models or listing on Marketplace.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$register(
  content_types,
  response_types,
  inference_instances,
  transform_instances,
  image_uri = NULL,
  model_package_name = NULL,
  model_package_group_name = NULL,
  model_metrics = NULL,
  metadata_properties = NULL,
  marketplace_cert = FALSE,
  approval_status = NULL,
  description = NULL,
  compile_model_family = NULL,
  model_name = NULL,
  drift_check_baselines = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content_types}}{(list): The supported MIME types for the input data.}

\item{\code{response_types}}{(list): The supported MIME types for the output data.}

\item{\code{inference_instances}}{(list): A list of the instance types that are used to
generate inferences in real-time.}

\item{\code{transform_instances}}{(list): A list of the instance types on which a transformation
job can be run or on which an endpoint can be deployed.}

\item{\code{image_uri}}{(str): The container image uri for Model Package, if not specified,
Estimator's training container image will be used (default: None).}

\item{\code{model_package_name}}{(str): Model Package name, exclusive to `model_package_group_name`,
using `model_package_name` makes the Model Package un-versioned (default: None).}

\item{\code{model_package_group_name}}{(str): Model Package Group name, exclusive to
`model_package_name`, using `model_package_group_name` makes the Model Package
versioned (default: None).}

\item{\code{model_metrics}}{(ModelMetrics): ModelMetrics object (default: None).}

\item{\code{metadata_properties}}{(MetadataProperties): MetadataProperties (default: None).}

\item{\code{marketplace_cert}}{(bool): A boolean value indicating if the Model Package is certified
for AWS Marketplace (default: False).}

\item{\code{approval_status}}{(str): Model Approval Status, values can be "Approved", "Rejected",
or "PendingManualApproval" (default: "PendingManualApproval").}

\item{\code{description}}{(str): Model Package description (default: None).}

\item{\code{compile_model_family}}{(str): Instance family for compiled model, if specified, a compiled
model will be used (default: None).}

\item{\code{model_name}}{(str): User defined model name (default: None).}

\item{\code{drift_check_baselines}}{(DriftCheckBaselines): DriftCheckBaselines object (default: None).}

\item{\code{...}}{: Passed to invocation of ``create_model()``. Implementations may customize
``create_model()`` to accept ``**kwargs`` to customize model creation during
deploy. For more, see the implementation docs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
str: A string of SageMaker Model Package ARN.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_model"></a>}}
\if{latex}{\out{\hypertarget{method-create_model}{}}}
\subsection{Method \code{create_model()}}{
Create a SageMaker ``Model`` object that can be deployed to an
             ``Endpoint``.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$create_model(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{: Keyword arguments used by the implemented method for
creating the ``Model``.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sagemaker.model.Model: A SageMaker ``Model`` object. See
             :func:`~sagemaker.model.Model` for full details.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete_endpoint"></a>}}
\if{latex}{\out{\hypertarget{method-delete_endpoint}{}}}
\subsection{Method \code{delete_endpoint()}}{
Delete an Amazon SageMaker ``Endpoint``.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$delete_endpoint()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-transformer"></a>}}
\if{latex}{\out{\hypertarget{method-transformer}{}}}
\subsection{Method \code{transformer()}}{
Return a ``Transformer`` that uses a SageMaker Model based on the
             training job. It reuses the SageMaker Session and base job name used by
             the Estimator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$transformer(
  instance_count,
  instance_type,
  strategy = NULL,
  assemble_with = NULL,
  output_path = NULL,
  output_kms_key = NULL,
  accept = NULL,
  env = NULL,
  max_concurrent_transforms = NULL,
  max_payload = NULL,
  tags = NULL,
  role = NULL,
  volume_kms_key = NULL,
  vpc_config_override = "VPC_CONFIG_DEFAULT",
  enable_network_isolation = NULL,
  model_name = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{instance_count}}{(int): Number of EC2 instances to use.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use, for example,
'ml.c4.xlarge'.}

\item{\code{strategy}}{(str): The strategy used to decide how to batch records in
a single request (default: NULL). Valid values: 'MultiRecord'
and 'SingleRecord'.}

\item{\code{assemble_with}}{(str): How the output is assembled (default: NULL).
Valid values: 'Line' or 'NULL'.}

\item{\code{output_path}}{(str): S3 location for saving the transform result. If
not specified, results are stored to a default bucket.}

\item{\code{output_kms_key}}{(str): Optional. KMS key ID for encrypting the
transform output (default: NULL).}

\item{\code{accept}}{(str): The accept header passed by the client to
the inference endpoint. If it is supported by the endpoint,
it will be the format of the batch transform output.}

\item{\code{env}}{(dict): Environment variables to be set for use during the
transform job (default: NULL).}

\item{\code{max_concurrent_transforms}}{(int): The maximum number of HTTP requests
to be made to each individual transform container at one time.}

\item{\code{max_payload}}{(int): Maximum size of the payload in a single HTTP
request to the container in MB.}

\item{\code{tags}}{(list[dict]): List of tags for labeling a transform job. If
NULL specified, then the tags used for the training job are used
for the transform job.}

\item{\code{role}}{(str): The ``ExecutionRoleArn`` IAM Role ARN for the ``Model``,
which is also used during transform jobs. If not specified, the
role from the Estimator will be used.}

\item{\code{volume_kms_key}}{(str): Optional. KMS key ID for encrypting the volume
attached to the ML compute instance (default: NULL).}

\item{\code{vpc_config_override}}{(dict[str, list[str]]): Optional override for the
VpcConfig set on the model.
Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{enable_network_isolation}}{(bool): Specifies whether container will
run in network isolation mode. Network isolation mode restricts
the container access to outside networks (such as the internet).
The container does not make any inbound or outbound network
calls. If True, a channel named "code" will be created for any
user entry script for inference. Also known as Internet-free mode.
If not specified, this setting is taken from the estimator's
current configuration.}

\item{\code{model_name}}{(str): Name to use for creating an Amazon SageMaker
model. If not specified, the name of the training job is used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_vpc_config"></a>}}
\if{latex}{\out{\hypertarget{method-get_vpc_config}{}}}
\subsection{Method \code{get_vpc_config()}}{
Returns VpcConfig dict either from this Estimator's subnets and
             security groups, or else validate and return an optional override value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$get_vpc_config(vpc_config_override = "VPC_CONFIG_DEFAULT")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vpc_config_override}}{:}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.prepare_for_training"></a>}}
\if{latex}{\out{\hypertarget{method-.prepare_for_training}{}}}
\subsection{Method \code{.prepare_for_training()}}{
Set any values in the estimator that need to be set before training.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$.prepare_for_training(job_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{job_name}}{(str): Name of the training job to be created. If not
specified, one is generated, using the base name given to the
constructor if applicable.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-enable_default_profiling"></a>}}
\if{latex}{\out{\hypertarget{method-enable_default_profiling}{}}}
\subsection{Method \code{enable_default_profiling()}}{
Update training job to enable Debugger monitoring.
             This method enables Debugger monitoring with
             the default ``profiler_config`` parameter to collect system
             metrics and the default built-in ``profiler_report`` rule.
             Framework metrics won't be saved.
             To update training job to emit framework metrics, you can use
             :class:`~sagemaker.estimator.Estimator.update_profiler`
             method and specify the framework metrics you want to enable.
             This method is callable when the training job is in progress while
             Debugger monitoring is disabled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$enable_default_profiling()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-disable_profiling"></a>}}
\if{latex}{\out{\hypertarget{method-disable_profiling}{}}}
\subsection{Method \code{disable_profiling()}}{
Update the current training job in progress to disable profiling.
             Debugger stops collecting the system and framework metrics
             and turns off the Debugger built-in monitoring and profiling rules.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$disable_profiling()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_profiler"></a>}}
\if{latex}{\out{\hypertarget{method-update_profiler}{}}}
\subsection{Method \code{update_profiler()}}{
Update training jobs to enable profiling.
             This method updates the ``profiler_config`` parameter
             and initiates Debugger built-in rules for profiling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$update_profiler(
  rules = NULL,
  system_monitor_interval_millis = NULL,
  s3_output_path = NULL,
  framework_profile_params = NULL,
  disable_framework_metrics = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rules}}{(list[:class:`~sagemaker.debugger.ProfilerRule`]): A list of
:class:`~sagemaker.debugger.ProfilerRule` objects to define
rules for continuous analysis with SageMaker Debugger. Currently, you can
only add new profiler rules during the training job. (default: ``None``)}

\item{\code{system_monitor_interval_millis}}{(int): How often profiling system metrics are
collected; Unit: Milliseconds (default: ``None``)}

\item{\code{s3_output_path}}{(str): The location in S3 to store the output. If profiler is enabled
once, s3_output_path cannot be changed. (default: ``None``)}

\item{\code{framework_profile_params}}{(:class:`~sagemaker.debugger.FrameworkProfile`):
A parameter object for framework metrics profiling. Configure it using
the :class:`~sagemaker.debugger.FrameworkProfile` class.
To use the default framework profile parameters, pass ``FrameworkProfile()``.
For more information about the default values,
see :class:`~sagemaker.debugger.FrameworkProfile`. (default: ``None``)}

\item{\code{disable_framework_metrics}}{(bool): Specify whether to disable all the framework metrics.
This won't update system metrics and the Debugger built-in rules for monitoring.
To stop both monitoring and profiling,
use the :class:`~sagemaker.estimator.Estimator.desable_profiling`
method. (default: ``False``)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EstimatorBase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
