% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amazon_knn.R
\name{KNN}
\alias{KNN}
\title{An index-based algorithm. It uses a non-parametric method for classification or regression.}
\description{
For classification problems, the algorithm queries the k points that are closest to the sample
             point and returns the most frequently used label of their class as the predicted label. For
             regression problems, the algorithm queries the k closest points to the sample point and returns
             the average of their feature values as the predicted value.
}
\section{Super classes}{
\code{\link[sagemaker.mlcore:EstimatorBase]{sagemaker.mlcore::EstimatorBase}} -> \code{\link[sagemaker.mlcore:AmazonAlgorithmEstimatorBase]{sagemaker.mlcore::AmazonAlgorithmEstimatorBase}} -> \code{KNN}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{repo_name}}{sagemaker repo name for framework}

\item{\code{repo_version}}{version of framework}

\item{\code{.module}}{mimic python module}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{k}}{Number of nearest neighbors.}

\item{\code{sample_size}}{Number of data points to be sampled from the training data set}

\item{\code{predictor_type}}{Type of inference to use on the data's labels}

\item{\code{dimension_reduction_target}}{Target dimension to reduce to}

\item{\code{dimension_reduction_type}}{Type of dimension reduction technique to use}

\item{\code{index_metric}}{Distance metric to measure between points when finding nearest neighbors}

\item{\code{index_type}}{Type of index to use. Valid values are "faiss.Flat", "faiss.IVFFlat", "faiss.IVFPQ".}

\item{\code{faiss_index_ivf_nlists}}{Number of centroids to construct in the index}

\item{\code{faiss_index_pq_m}}{Number of vector sub-components to construct in the index}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{KNN$new()}}
\item \href{#method-create_model}{\code{KNN$create_model()}}
\item \href{#method-.prepare_for_training}{\code{KNN$.prepare_for_training()}}
\item \href{#method-clone}{\code{KNN$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="attach">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-attach}{\code{sagemaker.mlcore::EstimatorBase$attach()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="compile_model">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-compile_model}{\code{sagemaker.mlcore::EstimatorBase$compile_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="delete_endpoint">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-delete_endpoint}{\code{sagemaker.mlcore::EstimatorBase$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="deploy">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-deploy}{\code{sagemaker.mlcore::EstimatorBase$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="describe">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-describe}{\code{sagemaker.mlcore::EstimatorBase$describe()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="disable_profiling">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-disable_profiling}{\code{sagemaker.mlcore::EstimatorBase$disable_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="enable_default_profiling">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-enable_default_profiling}{\code{sagemaker.mlcore::EstimatorBase$enable_default_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="enable_network_isolation">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-enable_network_isolation}{\code{sagemaker.mlcore::EstimatorBase$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="format">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-format}{\code{sagemaker.mlcore::EstimatorBase$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="get_vpc_config">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-get_vpc_config}{\code{sagemaker.mlcore::EstimatorBase$get_vpc_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="help">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-help}{\code{sagemaker.mlcore::EstimatorBase$help()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="latest_job_debugger_artifacts_path">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-latest_job_debugger_artifacts_path}{\code{sagemaker.mlcore::EstimatorBase$latest_job_debugger_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="latest_job_profiler_artifacts_path">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-latest_job_profiler_artifacts_path}{\code{sagemaker.mlcore::EstimatorBase$latest_job_profiler_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="latest_job_tensorboard_artifacts_path">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-latest_job_tensorboard_artifacts_path}{\code{sagemaker.mlcore::EstimatorBase$latest_job_tensorboard_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="logs">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-logs}{\code{sagemaker.mlcore::EstimatorBase$logs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="register">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-register}{\code{sagemaker.mlcore::EstimatorBase$register()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="rule_job_summary">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-rule_job_summary}{\code{sagemaker.mlcore::EstimatorBase$rule_job_summary()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="transformer">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-transformer}{\code{sagemaker.mlcore::EstimatorBase$transformer()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="EstimatorBase" data-id="update_profiler">}\href{../../sagemaker.mlcore/html/EstimatorBase.html#method-update_profiler}{\code{sagemaker.mlcore::EstimatorBase$update_profiler()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="fit">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-fit}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$fit()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="hyperparameters">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-hyperparameters}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$hyperparameters()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="prepare_workflow_for_training">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-prepare_workflow_for_training}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$prepare_workflow_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="record_set">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-record_set}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$record_set()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="training_image_uri">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-training_image_uri}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$training_image_uri()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="wait">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-wait}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$wait()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
k-nearest neighbors (KNN) is :class:`Estimator` used for
             classification and regression. This Estimator may be fit via calls to
             :meth:`~sagemaker.amazon.amazon_estimator.AmazonAlgorithmEstimatorBase.fit`.
             It requires Amazon :class:`~sagemaker.amazon.record_pb2.Record` protobuf
             serialized data to be stored in S3. There is an utility
             :meth:`~sagemaker.amazon.amazon_estimator.AmazonAlgorithmEstimatorBase.record_set`
             that can be used to upload data to S3 and creates
             :class:`~sagemaker.amazon.amazon_estimator.RecordSet` to be passed to
             the `fit` call. To learn more about the Amazon protobuf Record class and
             how to prepare bulk data in this format, please consult AWS technical
             documentation:
             https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-training.html After
             this Estimator is fit, model data is stored in S3. The model may be
             deployed to an Amazon SageMaker Endpoint by invoking
             :meth:`~sagemaker.amazon.estimator.EstimatorBase.deploy`. As well as
             deploying an Endpoint, deploy returns a
             :class:`~sagemaker.amazon.knn.KNNPredictor` object that can be used for
             inference calls using the trained model hosted in the SageMaker
             Endpoint. KNN Estimators can be configured by setting hyperparameters.
             The available hyperparameters for KNN are documented below. For further
             information on the AWS KNN algorithm, please consult AWS technical
             documentation: https://docs.aws.amazon.com/sagemaker/latest/dg/knn.html
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KNN$new(
  role,
  instance_count,
  instance_type,
  k,
  sample_size,
  predictor_type,
  dimension_reduction_type = NULL,
  dimension_reduction_target = NULL,
  index_type = NULL,
  index_metric = NULL,
  faiss_index_ivf_nlists = NULL,
  faiss_index_pq_m = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): An AWS IAM role (either name or full ARN). The Amazon
SageMaker training jobs and APIs that create Amazon SageMaker
endpoints use this role to access training data and model
artifacts. After the endpoint is created, the inference code
might use the IAM role, if accessing AWS resource.}

\item{\code{instance_count}}{(int): Number of Amazon EC2 instances to use
for training.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use for training,
for example, 'ml.c4.xlarge'.}

\item{\code{k}}{(int): Required. Number of nearest neighbors.}

\item{\code{sample_size}}{(int): Required. Number of data points to be sampled
from the training data set.}

\item{\code{predictor_type}}{(str): Required. Type of inference to use on the
data's labels, allowed values are 'classifier' and 'regressor'.}

\item{\code{dimension_reduction_type}}{(str): Optional. Type of dimension
reduction technique to use. Valid values: "sign", "fjlt"}

\item{\code{dimension_reduction_target}}{(int): Optional. Target dimension to
reduce to. Required when dimension_reduction_type is specified.}

\item{\code{index_type}}{(str): Optional. Type of index to use. Valid values are
"faiss.Flat", "faiss.IVFFlat", "faiss.IVFPQ".}

\item{\code{index_metric}}{(str): Optional. Distance metric to measure between
points when finding nearest neighbors. Valid values are
"COSINE", "INNER_PRODUCT", "L2"}

\item{\code{faiss_index_ivf_nlists}}{(str): Optional. Number of centroids to
construct in the index if index_type is "faiss.IVFFlat" or
"faiss.IVFPQ".}

\item{\code{faiss_index_pq_m}}{(int): Optional. Number of vector sub-components to
construct in the index, if index_type is "faiss.IVFPQ".}

\item{\code{...}}{: base class keyword argument values.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_model"></a>}}
\if{latex}{\out{\hypertarget{method-create_model}{}}}
\subsection{Method \code{create_model()}}{
Return a :class:`~sagemaker.amazon.KNNModel` referencing the latest
             s3 model data produced by this Estimator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KNN$create_model(vpc_config_override = "VPC_CONFIG_DEFAULT", ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vpc_config_override}}{(dict[str, list[str]]): Optional override for VpcConfig set on
the model. Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{...}}{: Additional kwargs passed to the KNNModel constructor.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.prepare_for_training"></a>}}
\if{latex}{\out{\hypertarget{method-.prepare_for_training}{}}}
\subsection{Method \code{.prepare_for_training()}}{
Set hyperparameters needed for training. This method will also
             validate ``source_dir``.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KNN$.prepare_for_training(records, mini_batch_size = NULL, job_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{records}}{(RecordSet) – The records to train this Estimator on.}

\item{\code{mini_batch_size}}{(int or None) – The size of each mini-batch to use
when training. If None, a default value will be used.}

\item{\code{job_name}}{(str): Name of the training job to be created. If not
specified, one is generated, using the base name given to the
constructor if applicable.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KNN$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
