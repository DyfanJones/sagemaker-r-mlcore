% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amazon_estimator.R
\name{AmazonAlgorithmEstimatorBase}
\alias{AmazonAlgorithmEstimatorBase}
\title{AmazonAlgorithmEstimatorBase Class}
\description{
Base class for Amazon first-party Estimator implementations. This class
             isn't intended to be instantiated directly.
}
\section{Super class}{
\code{\link[R6sagemaker.common:EstimatorBase]{R6sagemaker.common::EstimatorBase}} -> \code{AmazonAlgorithmEstimatorBase}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{repo_name}}{The repo name for the account}

\item{\code{repo_version}}{Version fo repo to call}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{data_location}}{The s3 prefix to upload RecordSet objects to, expressed as an S3 url}

\item{\code{feature_dim}}{Hyperparameter class for feature_dim}

\item{\code{mini_batch_size}}{Hyperparameter class for mini_batch_size}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{AmazonAlgorithmEstimatorBase$new()}}
\item \href{#method-training_image_uri}{\code{AmazonAlgorithmEstimatorBase$training_image_uri()}}
\item \href{#method-hyperparameters}{\code{AmazonAlgorithmEstimatorBase$hyperparameters()}}
\item \href{#method-prepare_workflow_for_training}{\code{AmazonAlgorithmEstimatorBase$prepare_workflow_for_training()}}
\item \href{#method-fit}{\code{AmazonAlgorithmEstimatorBase$fit()}}
\item \href{#method-record_set}{\code{AmazonAlgorithmEstimatorBase$record_set()}}
\item \href{#method-wait}{\code{AmazonAlgorithmEstimatorBase$wait()}}
\item \href{#method-clone}{\code{AmazonAlgorithmEstimatorBase$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id=".prepare_for_training">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-.prepare_for_training}{\code{R6sagemaker.common::EstimatorBase$.prepare_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="attach">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-attach}{\code{R6sagemaker.common::EstimatorBase$attach()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="compile_model">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-compile_model}{\code{R6sagemaker.common::EstimatorBase$compile_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="create_model">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-create_model}{\code{R6sagemaker.common::EstimatorBase$create_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="delete_endpoint">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-delete_endpoint}{\code{R6sagemaker.common::EstimatorBase$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="deploy">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-deploy}{\code{R6sagemaker.common::EstimatorBase$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="disable_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-disable_profiling}{\code{R6sagemaker.common::EstimatorBase$disable_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_default_profiling">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_default_profiling}{\code{R6sagemaker.common::EstimatorBase$enable_default_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="enable_network_isolation">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-enable_network_isolation}{\code{R6sagemaker.common::EstimatorBase$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="format">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-format}{\code{R6sagemaker.common::EstimatorBase$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="get_vpc_config">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-get_vpc_config}{\code{R6sagemaker.common::EstimatorBase$get_vpc_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_debugger_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_debugger_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_debugger_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_profiler_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_profiler_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_profiler_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_tensorboard_artifacts_path">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-latest_job_tensorboard_artifacts_path}{\code{R6sagemaker.common::EstimatorBase$latest_job_tensorboard_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="logs">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-logs}{\code{R6sagemaker.common::EstimatorBase$logs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="register">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-register}{\code{R6sagemaker.common::EstimatorBase$register()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="transformer">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-transformer}{\code{R6sagemaker.common::EstimatorBase$transformer()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="R6sagemaker.common" data-topic="EstimatorBase" data-id="update_profiler">}\href{../../R6sagemaker.common/html/EstimatorBase.html#method-update_profiler}{\code{R6sagemaker.common::EstimatorBase$update_profiler()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize an AmazonAlgorithmEstimatorBase.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$new(
  role,
  instance_count,
  instance_type,
  data_location = NULL,
  enable_network_isolation = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): An AWS IAM role (either name or full ARN). The Amazon
SageMaker training jobs and APIs that create Amazon SageMaker
endpoints use this role to access training data and model
artifacts. After the endpoint is created, the inference code
might use the IAM role, if it needs to access an AWS resource.}

\item{\code{instance_count}}{(int): Number of Amazon EC2 instances to use
for training.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use for training,
for example, 'ml.c4.xlarge'.}

\item{\code{data_location}}{(str or None): The s3 prefix to upload RecordSet
objects to, expressed as an S3 url. For example
"s3://example-bucket/some-key-prefix/". Objects will be saved in
a unique sub-directory of the specified location. If None, a
default data location will be used.}

\item{\code{enable_network_isolation}}{(bool): Specifies whether container will
run in network isolation mode. Network isolation mode restricts
the container access to outside networks (such as the internet).
Also known as internet-free mode (default: ``False``).}

\item{\code{...}}{: Additional parameters passed to
:class:`~sagemaker.estimator.EstimatorBase`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-training_image_uri"></a>}}
\if{latex}{\out{\hypertarget{method-training_image_uri}{}}}
\subsection{Method \code{training_image_uri()}}{
Return algorithm image URI for the given AWS region, repository name, and
             repository version
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$training_image_uri()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-hyperparameters"></a>}}
\if{latex}{\out{\hypertarget{method-hyperparameters}{}}}
\subsection{Method \code{hyperparameters()}}{
Return all non-None ``hyperparameter`` values on ``obj`` as a
             ``dict[str,str].``
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$hyperparameters()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_workflow_for_training"></a>}}
\if{latex}{\out{\hypertarget{method-prepare_workflow_for_training}{}}}
\subsection{Method \code{prepare_workflow_for_training()}}{
Calls _prepare_for_training. Used when setting up a workflow.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$prepare_workflow_for_training(
  records = NULL,
  mini_batch_size = NULL,
  job_name = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{records}}{(:class:`~RecordSet`): The records to train this ``Estimator`` on.}

\item{\code{mini_batch_size}}{(int or None): The size of each mini-batch to use when
training. If ``None``, a default value will be used.}

\item{\code{job_name}}{(str): Name of the training job to be created. If not
specified, one is generated, using the base name given to the
constructor if applicable.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fit"></a>}}
\if{latex}{\out{\hypertarget{method-fit}{}}}
\subsection{Method \code{fit()}}{
Fit this Estimator on serialized Record objects, stored in S3.
             ``records`` should be an instance of :class:`~RecordSet`. This
             defines a collection of S3 data files to train this ``Estimator`` on.
             Training data is expected to be encoded as dense or sparse vectors in
             the "values" feature on each Record. If the data is labeled, the label
             is expected to be encoded as a list of scalas in the "values" feature of
             the Record label.
             More information on the Amazon Record format is available at:
             https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-training.html
             See :meth:`~AmazonAlgorithmEstimatorBase.record_set` to construct a
             ``RecordSet`` object from :class:`~numpy.ndarray` arrays.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$fit(
  records,
  mini_batch_size = NULL,
  wait = TRUE,
  logs = TRUE,
  job_name = NULL,
  experiment_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{records}}{(:class:`~RecordSet`): The records to train this ``Estimator`` on}

\item{\code{mini_batch_size}}{(int or None): The size of each mini-batch to use
when training. If ``None``, a default value will be used.}

\item{\code{wait}}{(bool): Whether the call should wait until the job completes
(default: True).}

\item{\code{logs}}{(bool): Whether to show the logs produced by the job. Only
meaningful when wait is True (default: True).}

\item{\code{job_name}}{(str): Training job name. If not specified, the estimator
generates a default job name, based on the training image name
and current timestamp.}

\item{\code{experiment_config}}{(dict[str, str]): Experiment management configuration.
Dictionary contains three optional keys, 'ExperimentName',
'TrialName', and 'TrialComponentName'
(default: ``None``).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-record_set"></a>}}
\if{latex}{\out{\hypertarget{method-record_set}{}}}
\subsection{Method \code{record_set()}}{
Build a :class:`~RecordSet` from a numpy :class:`~ndarray` matrix and
             label vector.
             For the 2D ``ndarray`` ``train``, each row is converted to a
             :class:`~Record` object. The vector is stored in the "values" entry of
             the ``features`` property of each Record. If ``labels`` is not None,
             each corresponding label is assigned to the "values" entry of the
             ``labels`` property of each Record.
             The collection of ``Record`` objects are protobuf serialized and
             uploaded to new S3 locations. A manifest file is generated containing
             the list of objects created and also stored in S3.
             The number of S3 objects created is controlled by the
             ``instance_count`` property on this Estimator. One S3 object is
             created per training instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$record_set(
  train,
  labels = NULL,
  channel = "train",
  encrypt = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{train}}{(numpy.ndarray): A 2D numpy array of training data.}

\item{\code{labels}}{(numpy.ndarray): A 1D numpy array of labels. Its length must
be equal to the number of rows in ``train``.}

\item{\code{channel}}{(str): The SageMaker TrainingJob channel this RecordSet
should be assigned to.}

\item{\code{encrypt}}{(bool): Specifies whether the objects uploaded to S3 are
encrypted on the server side using AES-256 (default: ``False``).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
RecordSet: A RecordSet referencing the encoded, uploading training
             and label data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-wait"></a>}}
\if{latex}{\out{\hypertarget{method-wait}{}}}
\subsection{Method \code{wait()}}{
Wait for an Amazon SageMaker job to complete.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$wait(logs = "All")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{logs}}{([str]): A list of strings specifying which logs to print. Acceptable
strings are "All", "NULL", "Training", or "Rules". To maintain backwards
compatibility, boolean values are also accepted and converted to strings.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AmazonAlgorithmEstimatorBase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
