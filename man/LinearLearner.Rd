% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amazon_linear_learner.R
\name{LinearLearner}
\alias{LinearLearner}
\title{A supervised learning algorithms used for solving classification or regression problems.}
\description{
For input, you give the model labeled examples (x, y). x is a high-dimensional vector and
             y is a numeric label. For binary classification problems, the label must be either 0 or 1.
             For multiclass classification problems, the labels must be from 0 to num_classes - 1. For
             regression problems, y is a real number. The algorithm learns a linear function, or, for
             classification problems, a linear threshold function, and maps a vector x to an approximation
             of the label y
}
\section{Super classes}{
\code{\link[sagemaker.common:EstimatorBase]{sagemaker.common::EstimatorBase}} -> \code{\link[sagemaker.mlcore:AmazonAlgorithmEstimatorBase]{sagemaker.mlcore::AmazonAlgorithmEstimatorBase}} -> \code{LinearLearner}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{repo_name}}{sagemaker repo name for framework}

\item{\code{repo_version}}{version of framework}

\item{\code{DEFAULT_MINI_BATCH_SIZE}}{The size of each mini-batch to use when training.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{binary_classifier_model_selection_criteria}}{One of 'accuracy', 'f1', 'f_beta', 'precision_at_target_recall', 'recall_at_target_precision', 'cross_entropy_loss', 'loss_function'}

\item{\code{target_recall}}{Only applicable if binary_classifier_model_selection_criteria is precision_at_target_recall}

\item{\code{target_precision}}{Only applicable if binary_classifier_model_selection_criteria is recall_at_target_precision.}

\item{\code{positive_example_weight_mult}}{The importance weight of positive examples is multiplied by this constant.}

\item{\code{epochs}}{The maximum number of passes to make over the training data.}

\item{\code{use_bias}}{Whether to include a bias field}

\item{\code{num_models}}{Number of models to train in parallel}

\item{\code{num_calibration_samples}}{Number of observations to use from validation dataset for doing model calibration}

\item{\code{init_method}}{Function to use to set the initial model weights.}

\item{\code{init_scale}}{For "uniform" init, the range of values.}

\item{\code{init_sigma}}{For "normal" init, the standard-deviation.}

\item{\code{init_bias}}{Initial weight for bias term}

\item{\code{optimizer}}{One of 'sgd', 'adam', 'rmsprop' or 'auto'}

\item{\code{loss}}{One of 'logistic', 'squared_loss', 'absolute_loss',
'hinge_loss', 'eps_insensitive_squared_loss', 'eps_insensitive_absolute_loss',
'quantile_loss', 'huber_loss' or
'softmax_loss' or 'auto'.}

\item{\code{wd}}{L2 regularization parameter}

\item{\code{l1}}{L1 regularization parameter.}

\item{\code{momentum}}{Momentum parameter of sgd optimizer.}

\item{\code{learning_rate}}{The SGD learning rate}

\item{\code{beta_1}}{Exponential decay rate for first moment estimates.}

\item{\code{beta_2}}{Exponential decay rate for second moment estimates.}

\item{\code{bias_lr_mult}}{Allows different learning rate for the bias term.}

\item{\code{bias_wd_mult}}{Allows different regularization for the bias term.}

\item{\code{use_lr_scheduler}}{If true, we use a scheduler for the learning rate.}

\item{\code{lr_scheduler_step}}{The number of steps between decreases of the learning rate}

\item{\code{lr_scheduler_factor}}{Every lr_scheduler_step the learning rate will decrease by this quantity.}

\item{\code{lr_scheduler_minimum_lr}}{Every lr_scheduler_step the learning rate will decrease by this quantity.}

\item{\code{normalize_data}}{Normalizes the features before training to have standard deviation of 1.0.}

\item{\code{normalize_label}}{Normalizes the regression label to have a standard deviation of 1.0.}

\item{\code{unbias_data}}{If true, features are modified to have mean 0.0.}

\item{\code{unbias_label}}{If true, labels are modified to have mean 0.0.}

\item{\code{num_point_for_scaler}}{The number of data points to use for calculating the normalizing and unbiasing terms.}

\item{\code{margin}}{The margin for hinge_loss.}

\item{\code{quantile}}{Quantile for quantile loss.}

\item{\code{loss_insensitivity}}{Parameter for epsilon insensitive loss type.}

\item{\code{huber_delta}}{Parameter for Huber loss.}

\item{\code{early_stopping_patience}}{The number of epochs to wait before ending training if no improvement is made.}

\item{\code{early_stopping_tolerance}}{Relative tolerance to measure an improvement in loss.}

\item{\code{num_classes}}{The number of classes for the response variable.}

\item{\code{accuracy_top_k}}{The value of k when computing the Top K}

\item{\code{f_beta}}{The value of beta to use when calculating F score
metrics for binary or multiclass classification.}

\item{\code{balance_multiclass_weights}}{Whether to use class weights which give each class equal importance
in the loss function.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{LinearLearner$new()}}
\item \href{#method-create_model}{\code{LinearLearner$create_model()}}
\item \href{#method-.prepare_for_training}{\code{LinearLearner$.prepare_for_training()}}
\item \href{#method-clone}{\code{LinearLearner$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="attach">}\href{../../sagemaker.common/html/EstimatorBase.html#method-attach}{\code{sagemaker.common::EstimatorBase$attach()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="compile_model">}\href{../../sagemaker.common/html/EstimatorBase.html#method-compile_model}{\code{sagemaker.common::EstimatorBase$compile_model()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="delete_endpoint">}\href{../../sagemaker.common/html/EstimatorBase.html#method-delete_endpoint}{\code{sagemaker.common::EstimatorBase$delete_endpoint()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="deploy">}\href{../../sagemaker.common/html/EstimatorBase.html#method-deploy}{\code{sagemaker.common::EstimatorBase$deploy()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="describe">}\href{../../sagemaker.common/html/EstimatorBase.html#method-describe}{\code{sagemaker.common::EstimatorBase$describe()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="disable_profiling">}\href{../../sagemaker.common/html/EstimatorBase.html#method-disable_profiling}{\code{sagemaker.common::EstimatorBase$disable_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="enable_default_profiling">}\href{../../sagemaker.common/html/EstimatorBase.html#method-enable_default_profiling}{\code{sagemaker.common::EstimatorBase$enable_default_profiling()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="enable_network_isolation">}\href{../../sagemaker.common/html/EstimatorBase.html#method-enable_network_isolation}{\code{sagemaker.common::EstimatorBase$enable_network_isolation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="format">}\href{../../sagemaker.common/html/EstimatorBase.html#method-format}{\code{sagemaker.common::EstimatorBase$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="get_vpc_config">}\href{../../sagemaker.common/html/EstimatorBase.html#method-get_vpc_config}{\code{sagemaker.common::EstimatorBase$get_vpc_config()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_debugger_artifacts_path">}\href{../../sagemaker.common/html/EstimatorBase.html#method-latest_job_debugger_artifacts_path}{\code{sagemaker.common::EstimatorBase$latest_job_debugger_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_profiler_artifacts_path">}\href{../../sagemaker.common/html/EstimatorBase.html#method-latest_job_profiler_artifacts_path}{\code{sagemaker.common::EstimatorBase$latest_job_profiler_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="latest_job_tensorboard_artifacts_path">}\href{../../sagemaker.common/html/EstimatorBase.html#method-latest_job_tensorboard_artifacts_path}{\code{sagemaker.common::EstimatorBase$latest_job_tensorboard_artifacts_path()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="logs">}\href{../../sagemaker.common/html/EstimatorBase.html#method-logs}{\code{sagemaker.common::EstimatorBase$logs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="register">}\href{../../sagemaker.common/html/EstimatorBase.html#method-register}{\code{sagemaker.common::EstimatorBase$register()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="rule_job_summary">}\href{../../sagemaker.common/html/EstimatorBase.html#method-rule_job_summary}{\code{sagemaker.common::EstimatorBase$rule_job_summary()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="transformer">}\href{../../sagemaker.common/html/EstimatorBase.html#method-transformer}{\code{sagemaker.common::EstimatorBase$transformer()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.common" data-topic="EstimatorBase" data-id="update_profiler">}\href{../../sagemaker.common/html/EstimatorBase.html#method-update_profiler}{\code{sagemaker.common::EstimatorBase$update_profiler()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="fit">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-fit}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$fit()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="hyperparameters">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-hyperparameters}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$hyperparameters()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="prepare_workflow_for_training">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-prepare_workflow_for_training}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$prepare_workflow_for_training()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="record_set">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-record_set}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$record_set()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="training_image_uri">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-training_image_uri}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$training_image_uri()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="sagemaker.mlcore" data-topic="AmazonAlgorithmEstimatorBase" data-id="wait">}\href{../../sagemaker.mlcore/html/AmazonAlgorithmEstimatorBase.html#method-wait}{\code{sagemaker.mlcore::AmazonAlgorithmEstimatorBase$wait()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
An :class:`Estimator` for binary classification and regression.
             Amazon SageMaker Linear Learner provides a solution for both
             classification and regression problems, allowing for exploring different
             training objectives simultaneously and choosing the best solution from a
             validation set. It allows the user to explore a large number of models
             and choose the best, which optimizes either continuous objectives such
             as mean square error, cross entropy loss, absolute error, etc., or
             discrete objectives suited for classification such as F1 measure,
             precision@recall, accuracy. The implementation provides a significant
             speedup over naive hyperparameter optimization techniques and an added
             convenience, when compared with solutions providing a solution only to
             continuous objectives.
             This Estimator may be fit via calls to
             :meth:`~sagemaker.amazon.amazon_estimator.AmazonAlgorithmEstimatorBase.fit_ndarray`
             or
             :meth:`~sagemaker.amazon.amazon_estimator.AmazonAlgorithmEstimatorBase.fit`.
             The former allows a LinearLearner model to be fit on a 2-dimensional
             numpy array. The latter requires Amazon
             :class:`~sagemaker.amazon.record_pb2.Record` protobuf serialized data to
             be stored in S3.
             To learn more about the Amazon protobuf Record class and how to
             prepare bulk data in this format, please consult AWS technical
             documentation:
             https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-training.html
             After this Estimator is fit, model data is stored in S3. The model
             may be deployed to an Amazon SageMaker Endpoint by invoking
             :meth:`~sagemaker.amazon.estimator.EstimatorBase.deploy`. As well as
             deploying an Endpoint, ``deploy`` returns a
             :class:`~sagemaker.amazon.linear_learner.LinearLearnerPredictor` object
             that can be used to make class or regression predictions, using the
             trained model.
             LinearLearner Estimators can be configured by setting
             hyperparameters. The available hyperparameters for LinearLearner are
             documented below. For further information on the AWS LinearLearner
             algorithm, please consult AWS technical documentation:
             https://docs.aws.amazon.com/sagemaker/latest/dg/linear-learner.html
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LinearLearner$new(
  role,
  instance_count,
  instance_type,
  predictor_type,
  binary_classifier_model_selection_criteria = NULL,
  target_recall = NULL,
  target_precision = NULL,
  positive_example_weight_mult = NULL,
  epochs = NULL,
  use_bias = NULL,
  num_models = NULL,
  num_calibration_samples = NULL,
  init_method = NULL,
  init_scale = NULL,
  init_sigma = NULL,
  init_bias = NULL,
  optimizer = NULL,
  loss = NULL,
  wd = NULL,
  l1 = NULL,
  momentum = NULL,
  learning_rate = NULL,
  beta_1 = NULL,
  beta_2 = NULL,
  bias_lr_mult = NULL,
  bias_wd_mult = NULL,
  use_lr_scheduler = NULL,
  lr_scheduler_step = NULL,
  lr_scheduler_factor = NULL,
  lr_scheduler_minimum_lr = NULL,
  normalize_data = NULL,
  normalize_label = NULL,
  unbias_data = NULL,
  unbias_label = NULL,
  num_point_for_scaler = NULL,
  margin = NULL,
  quantile = NULL,
  loss_insensitivity = NULL,
  huber_delta = NULL,
  early_stopping_patience = NULL,
  early_stopping_tolerance = NULL,
  num_classes = NULL,
  accuracy_top_k = NULL,
  f_beta = NULL,
  balance_multiclass_weights = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{(str): An AWS IAM role (either name or full ARN). The Amazon
SageMaker training jobs and APIs that create Amazon SageMaker
endpoints use this role to access training data and model
artifacts. After the endpoint is created, the inference code
might use the IAM role, if accessing AWS resource.}

\item{\code{instance_count}}{(int): Number of Amazon EC2 instances to use
for training.}

\item{\code{instance_type}}{(str): Type of EC2 instance to use for training,
for example, 'ml.c4.xlarge'.}

\item{\code{predictor_type}}{(str): The type of predictor to learn. Either
"binary_classifier" or "multiclass_classifier" or "regressor".}

\item{\code{binary_classifier_model_selection_criteria}}{(str): One of 'accuracy',
'f1', 'f_beta', 'precision_at_target_recall', 'recall_at_target_precision',
'cross_entropy_loss', 'loss_function'}

\item{\code{target_recall}}{(float): Target recall. Only applicable if
binary_classifier_model_selection_criteria is
precision_at_target_recall.}

\item{\code{target_precision}}{(float): Target precision. Only applicable if
binary_classifier_model_selection_criteria is
recall_at_target_precision.}

\item{\code{positive_example_weight_mult}}{(float): The importance weight of
positive examples is multiplied by this constant. Useful for
skewed datasets. Only applies for classification tasks.}

\item{\code{epochs}}{(int): The maximum number of passes to make over the training
data.}

\item{\code{use_bias}}{(bool): Whether to include a bias field}

\item{\code{num_models}}{(int): Number of models to train in parallel. If not set,
the number of parallel models to train will be decided by the
algorithm itself. One model will be trained according to the
given training parameter (regularization, optimizer, loss) and
the rest by close by parameters.}

\item{\code{num_calibration_samples}}{(int): Number of observations to use from
validation dataset for doing model calibration (finding the best threshold).}

\item{\code{init_method}}{(str): Function to use to set the initial model weights.
One of "uniform" or "normal"}

\item{\code{init_scale}}{(float): For "uniform" init, the range of values.}

\item{\code{init_sigma}}{(float): For "normal" init, the standard-deviation.}

\item{\code{init_bias}}{(float): Initial weight for bias term}

\item{\code{optimizer}}{(str): One of 'sgd', 'adam', 'rmsprop' or 'auto'}

\item{\code{loss}}{(str): One of 'logistic', 'squared_loss', 'absolute_loss',
'hinge_loss', 'eps_insensitive_squared_loss', 'eps_insensitive_absolute_loss',
'quantile_loss', 'huber_loss' or
'softmax_loss' or 'auto'.}

\item{\code{wd}}{(float): L2 regularization parameter i.e. the weight decay
parameter. Use 0 for no L2 regularization.}

\item{\code{l1}}{(float): L1 regularization parameter. Use 0 for no L1
regularization.}

\item{\code{momentum}}{(float): Momentum parameter of sgd optimizer.}

\item{\code{learning_rate}}{(float): The SGD learning rate}

\item{\code{beta_1}}{(float): Exponential decay rate for first moment estimates.
Only applies for adam optimizer.}

\item{\code{beta_2}}{(float): Exponential decay rate for second moment estimates.
Only applies for adam optimizer.}

\item{\code{bias_lr_mult}}{(float): Allows different learning rate for the bias
term. The actual learning rate for the bias is learning rate times bias_lr_mult.}

\item{\code{bias_wd_mult}}{(float): Allows different regularization for the bias
term. The actual L2 regularization weight for the bias is wd times bias_wd_mult.
By default there is no regularization on the bias term.}

\item{\code{use_lr_scheduler}}{(bool): If true, we use a scheduler for the
learning rate.}

\item{\code{lr_scheduler_step}}{(int): The number of steps between decreases of
the learning rate. Only applies to learning rate scheduler.}

\item{\code{lr_scheduler_factor}}{(float): Every lr_scheduler_step the learning
rate will decrease by this quantity. Only applies for learning
rate scheduler.}

\item{\code{lr_scheduler_minimum_lr}}{(float): The learning rate will never
decrease to a value lower than this. Only applies for learning rate scheduler.}

\item{\code{normalize_data}}{(bool): Normalizes the features before training to
have standard deviation of 1.0.}

\item{\code{normalize_label}}{(bool): Normalizes the regression label to have a
standard deviation of 1.0. If set for classification, it will be
ignored.}

\item{\code{unbias_data}}{(bool): If true, features are modified to have mean 0.0.}

\item{\code{unbias_label}}{(bool): If true, labels are modified to have mean 0.0.}

\item{\code{num_point_for_scaler}}{(int): The number of data points to use for
calculating the normalizing and unbiasing terms.}

\item{\code{margin}}{(float): The margin for hinge_loss.}

\item{\code{quantile}}{(float): Quantile for quantile loss. For quantile q, the
model will attempt to produce predictions such that true_label < prediction with
probability q.}

\item{\code{loss_insensitivity}}{(float): Parameter for epsilon insensitive loss
type. During training and metric evaluation, any error smaller than this is
considered to be zero.}

\item{\code{huber_delta}}{(float): Parameter for Huber loss. During training and
metric evaluation, compute L2 loss for errors smaller than delta and L1 loss for
errors larger than delta.}

\item{\code{early_stopping_patience}}{(int): The number of epochs to wait before ending training
if no improvement is made. The improvement is training loss if validation data is
not provided, or else it is the validation loss or the binary classification model
selection criteria like accuracy, f1-score etc. To disable early stopping,
set early_stopping_patience to a value larger than epochs.}

\item{\code{early_stopping_tolerance}}{(float): Relative tolerance to measure an
improvement in loss. If the ratio of the improvement in loss divided by the
previous best loss is smaller than this value, early stopping will
consider the improvement to be zero.}

\item{\code{num_classes}}{(int): The number of classes for the response variable.
Required when predictor_type is multiclass_classifier and ignored otherwise. The
classes are assumed to be labeled 0, ..., num_classes - 1.}

\item{\code{accuracy_top_k}}{(int): The value of k when computing the Top K
Accuracy metric for multiclass classification. An example is scored as correct
if the model assigns one of the top k scores to the true
label.}

\item{\code{f_beta}}{(float): The value of beta to use when calculating F score
metrics for binary or multiclass classification. Also used if
binary_classifier_model_selection_criteria is f_beta.}

\item{\code{balance_multiclass_weights}}{(bool): Whether to use class weights
which give each class equal importance in the loss function. Only used when
predictor_type is multiclass_classifier.}

\item{\code{...}}{: base class keyword argument values.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_model"></a>}}
\if{latex}{\out{\hypertarget{method-create_model}{}}}
\subsection{Method \code{create_model()}}{
Return a :class:`~sagemaker.amazon.LinearLearnerModel` referencing
             the latest s3 model data produced by this Estimator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LinearLearner$create_model(vpc_config_override = "VPC_CONFIG_DEFAULT", ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vpc_config_override}}{(dict[str, list[str]]): Optional override for VpcConfig set on
the model. Default: use subnets and security groups from this Estimator.
* 'Subnets' (list[str]): List of subnet ids.
* 'SecurityGroupIds' (list[str]): List of security group ids.}

\item{\code{...}}{: Additional kwargs passed to the LinearLearnerModel constructor.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.prepare_for_training"></a>}}
\if{latex}{\out{\hypertarget{method-.prepare_for_training}{}}}
\subsection{Method \code{.prepare_for_training()}}{
Set hyperparameters needed for training. This method will also
             validate ``source_dir``.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LinearLearner$.prepare_for_training(
  records,
  mini_batch_size = NULL,
  job_name = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{records}}{(RecordSet) – The records to train this Estimator on.}

\item{\code{mini_batch_size}}{(int or None) – The size of each mini-batch to use
when training. If None, a default value will be used.}

\item{\code{job_name}}{(str): Name of the training job to be created. If not
specified, one is generated, using the base name given to the
constructor if applicable.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LinearLearner$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
