% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predictor.R
\name{Predictor}
\alias{Predictor}
\title{Predictor Class}
\description{
Make prediction requests to an Amazon SageMaker endpoint.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{endpoint_name}}{Name of the Amazon SageMaker endpoint}

\item{\code{sagemaker_session}}{A SageMaker Session object}

\item{\code{serializer}}{Class to convert data into raw to send to endpoint}

\item{\code{deserializer}}{Class to convert raw data back from the endpoint}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{content_type}}{The MIME type of the data sent to the inference endpoint.}

\item{\code{accept}}{The content type(s) that are expected from the inference endpoint.}

\item{\code{endpoint}}{Deprecated attribute. Please use endpoint_name.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Predictor$new()}}
\item \href{#method-predict}{\code{Predictor$predict()}}
\item \href{#method-update_endpoint}{\code{Predictor$update_endpoint()}}
\item \href{#method-delete_endpoint}{\code{Predictor$delete_endpoint()}}
\item \href{#method-delete_model}{\code{Predictor$delete_model()}}
\item \href{#method-enable_data_capture}{\code{Predictor$enable_data_capture()}}
\item \href{#method-disable_data_capture}{\code{Predictor$disable_data_capture()}}
\item \href{#method-update_data_capture_config}{\code{Predictor$update_data_capture_config()}}
\item \href{#method-list_monitors}{\code{Predictor$list_monitors()}}
\item \href{#method-endpoint_context}{\code{Predictor$endpoint_context()}}
\item \href{#method-format}{\code{Predictor$format()}}
\item \href{#method-clone}{\code{Predictor$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a ``Predictor``.
             Behavior for serialization of input data and deserialization of
             result data can be configured through initializer arguments. If not
             specified, a sequence of bytes is expected and the API sends it in the
             request body without modifications. In response, the API returns the
             sequence of bytes from the prediction result without any modifications.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$new(
  endpoint_name,
  sagemaker_session = NULL,
  serializer = IdentitySerializer$new(),
  deserializer = BytesDeserializer$new(),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{endpoint_name}}{(str): Name of the Amazon SageMaker endpoint_name to which
requests are sent.}

\item{\code{sagemaker_session}}{(sagemaker.session.Session): A SageMaker Session
object, used for SageMaker interactions (default: NULL). If not
specified, one is created using the default AWS configuration
chain.}

\item{\code{serializer}}{(callable): Accepts a single argument, the input data,
and returns a sequence of bytes. It may provide a
``content_type`` attribute that defines the endpoint request
content type. If not specified, a sequence of bytes is expected
for the data. (default: ``IdentitySerializer``)}

\item{\code{deserializer}}{(callable): Accepts two arguments, the result data and
the response content type, and returns a sequence of bytes. It
may provide a ``content_type`` attribute that defines the
endpoint response's "Accept" content type. If not specified, a
sequence of bytes is expected for the data. (default: ``BytesDeserializer``)}

\item{\code{...}}{Any other parameters, including and deprecate parameters from sagemaker v-1.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-predict"></a>}}
\if{latex}{\out{\hypertarget{method-predict}{}}}
\subsection{Method \code{predict()}}{
Return the inference from the specified endpoint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$predict(
  data,
  initial_args = NULL,
  target_model = NULL,
  target_variant = NULL,
  inference_id = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(object): Input data for which you want the model to provide
inference. If a serializer was specified when creating the
Predictor, the result of the serializer is sent as input
data. Otherwise the data must be sequence of bytes, and the
predict method then sends the bytes in the request body as is.}

\item{\code{initial_args}}{(list[str,str]): Optional. Default arguments for boto3
``invoke_endpoint`` call. Default is NULL (no default
arguments).}

\item{\code{target_model}}{(str): S3 model artifact path to run an inference request on,
in case of a multi model endpoint. Does not apply to endpoints hosting
single model (Default: NULL)}

\item{\code{target_variant}}{(str): The name of the production variant to run an inference
request on (Default: NULL). Note that the ProductionVariant identifies the model
you want to host and the resources you want to deploy for hosting it.}

\item{\code{inference_id}}{(str): If you provide a value, it is added to the captured data
when you enable data capture on the endpoint (Default: None).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
object: Inference for the given input. If a deserializer was specified when creating
             the Predictor, the result of the deserializer is
             returned. Otherwise the response returns the sequence of bytes
             as is.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_endpoint"></a>}}
\if{latex}{\out{\hypertarget{method-update_endpoint}{}}}
\subsection{Method \code{update_endpoint()}}{
Update the existing endpoint with the provided attributes.
             This creates a new EndpointConfig in the process. If ``initial_instance_count``,
             ``instance_type``, ``accelerator_type``, or ``model_name`` is specified, then a new
             ProductionVariant configuration is created; values from the existing configuration
             are not preserved if any of those parameters are specified.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$update_endpoint(
  initial_instance_count = NULL,
  instance_type = NULL,
  accelerator_type = NULL,
  model_name = NULL,
  tags = NULL,
  kms_key = NULL,
  data_capture_config_dict = NULL,
  wait = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial_instance_count}}{(int): The initial number of instances to run in the endpoint.
             This is required if ``instance_type``, ``accelerator_type``, or ``model_name`` is
specified. Otherwise, the values from the existing endpoint configuration's
             ProductionVariants are used.}

\item{\code{instance_type}}{(str): The EC2 instance type to deploy the endpoint to.
This is required if ``initial_instance_count`` or ``accelerator_type`` is specified.
Otherwise, the values from the existing endpoint configuration's
``ProductionVariants`` are used.}

\item{\code{accelerator_type}}{(str): The type of Elastic Inference accelerator to attach to
             the endpoint, e.g. "ml.eia1.medium". If not specified, and
             ``initial_instance_count``, ``instance_type``, and ``model_name`` are also ``None``,
the values from the existing endpoint configuration's ``ProductionVariants`` are
             used. Otherwise, no Elastic Inference accelerator is attached to the endpoint.}

\item{\code{model_name}}{(str): The name of the model to be associated with the endpoint.
This is required if ``initial_instance_count``, ``instance_type``, or
``accelerator_type`` is specified and if there is more than one model associated
with the endpoint. Otherwise, the existing model for the endpoint is used.}

\item{\code{tags}}{(list[dict[str, str]]): The list of tags to add to the endpoint
config. If not specified, the tags of the existing endpoint configuration are used.
If any of the existing tags are reserved AWS ones (i.e. begin with "aws"),
they are not carried over to the new endpoint configuration.}

\item{\code{kms_key}}{(str): The KMS key that is used to encrypt the data on the storage volume
attached to the instance hosting the endpoint If not specified,
the KMS key of the existing endpoint configuration is used.}

\item{\code{data_capture_config_dict}}{(dict): The endpoint data capture configuration
for use with Amazon SageMaker Model Monitoring. If not specified,
the data capture configuration of the existing endpoint configuration is used.}

\item{\code{wait}}{(boolean): Waits for endpoint to update.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete_endpoint"></a>}}
\if{latex}{\out{\hypertarget{method-delete_endpoint}{}}}
\subsection{Method \code{delete_endpoint()}}{
Delete the Amazon SageMaker endpoint backing this predictor. Also
             delete the endpoint configuration attached to it if
             delete_endpoint_config is True.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$delete_endpoint(delete_endpoint_config = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{delete_endpoint_config}}{(bool, optional): Flag to indicate whether to
delete endpoint configuration together with endpoint. Defaults
to True. If True, both endpoint and endpoint configuration will
be deleted. If False, only endpoint will be deleted.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete_model"></a>}}
\if{latex}{\out{\hypertarget{method-delete_model}{}}}
\subsection{Method \code{delete_model()}}{
Deletes the Amazon SageMaker models backing this predictor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$delete_model()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-enable_data_capture"></a>}}
\if{latex}{\out{\hypertarget{method-enable_data_capture}{}}}
\subsection{Method \code{enable_data_capture()}}{
Updates the DataCaptureConfig for the Predictor's associated Amazon SageMaker Endpoint
             to enable data capture. For a more customized experience, refer to
             update_data_capture_config, instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$enable_data_capture()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-disable_data_capture"></a>}}
\if{latex}{\out{\hypertarget{method-disable_data_capture}{}}}
\subsection{Method \code{disable_data_capture()}}{
Updates the DataCaptureConfig for the Predictor's associated Amazon SageMaker Endpoint
             to disable data capture. For a more customized experience, refer to
             update_data_capture_config, instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$disable_data_capture()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_data_capture_config"></a>}}
\if{latex}{\out{\hypertarget{method-update_data_capture_config}{}}}
\subsection{Method \code{update_data_capture_config()}}{
Updates the DataCaptureConfig for the Predictor's associated Amazon SageMaker Endpoint
             with the provided DataCaptureConfig.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$update_data_capture_config(data_capture_config = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_capture_config}}{(sagemaker.model_monitor.DataCaptureConfig): The
DataCaptureConfig to update the predictor's endpoint to use.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-list_monitors"></a>}}
\if{latex}{\out{\hypertarget{method-list_monitors}{}}}
\subsection{Method \code{list_monitors()}}{
Generates ModelMonitor objects (or DefaultModelMonitors).
             Objects are generated based on the schedule(s) associated with the endpoint
             that this predictor refers to.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$list_monitors()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
[sagemaker.model_monitor.model_monitoring.ModelMonitor]: A list of
             ModelMonitor (or DefaultModelMonitor) objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-endpoint_context"></a>}}
\if{latex}{\out{\hypertarget{method-endpoint_context}{}}}
\subsection{Method \code{endpoint_context()}}{
Retrieves the lineage context object representing the endpoint.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$endpoint_context()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
ContextEndpoint: The context for the endpoint.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Predictor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
